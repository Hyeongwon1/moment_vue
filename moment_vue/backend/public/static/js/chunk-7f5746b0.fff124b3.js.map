{"version":3,"sources":["webpack:///../../../src/components/VGrid/VFlex.ts","webpack:///../../../src/components/VGrid/VContainer.ts","webpack:///../../../src/components/VGrid/VLayout.ts","webpack:///../../src/util/mergeData.ts","webpack:///../../../src/components/VGrid/grid.ts"],"names":["name","functional","props","id","tag","type","default","fluid","render","children","attrs","data","classes","Object","key","value","h","staticClass","class","Array","mergeTarget","i","arguments","listeners","prop"],"mappings":"kHAAA,0BAIe,sBAAf,S,4KCIe,0CAAyB,CACtCA,KADsC,cAEtCC,YAFsC,EAGtCC,MAAO,CACLC,GADK,OAELC,IAAK,CACHC,KADG,OAEHC,QAAS,OAEXC,MAAO,CACLF,KADK,QAELC,SAAS,IAGbE,OAdsC,SAchC,EAdgC,GAcF,IAClC,EADS,EAAyB,EAAzB,QAAyB,EAAzB,KAAeC,EAAU,EAAVA,SAEhBC,EAAR,EAAQA,MA2BR,OA1BA,IAEEC,EAAA,SACAC,EAAUC,OAAA,gBAA0B,SAAAC,GAGlC,YAAIA,EAAgB,OAAO,EAE3B,IAAMC,EAAQL,EAL0B,GASxC,OAAII,EAAA,WAAJ,UACEH,EAAA,YACA,GAGKI,GAAP,kBAAuBA,MAIvBb,EAAJ,KACES,EAAA,SAAgBA,EAAA,UAAhB,GACAA,EAAA,YAAmBT,EAAnB,IAGKc,EACLd,EADM,IAEN,eAAUS,EAAM,CACdM,YADc,YAEdC,MAAOC,MAAW,CAChB,mBAAoBjB,EAAMK,QADrB,OAEGK,GAFH,MAJX,O,kCCnDJ,0BAIe,sBAAf,W;;;;;GCUc,aACZ,IAEA,EAH+B,EACzBQ,EAAN,GACIC,EAAYC,UAAhB,OAKA,MAAOD,IAGL,cAAaR,OAAA,KAAYS,UAAzB,mBACE,OADF,EAAwC,KACtC,GAEE,YACA,YACA,iBACOH,MAAA,QAAcC,EAAnB,MACEA,EAAA,OAIFA,EAAA,GAAoBA,EAAA,UAAyBE,UAAA,GAA7C,IACA,MAEF,kBACE,IAAKA,UAAA,GAAL,GACE,WAEF,IAAIF,EAAA,KACFA,EAAA,OAEEA,EAAJ,KAEEA,EAAA,SAEFA,EAAA,IAAqBE,UAAA,MAArB,OACA,MAMF,SACA,eACOF,EAAL,KACEA,EAAA,OAGF,IADA,IAAMG,EAAYH,EAAlB,GACA,MAAcP,OAAA,KAAYS,UAAA,OAA1B,qBAAqD,KAE/CC,EAAJ,GAEEA,EAAA,GAAmBJ,QAAA,OACjBI,EADiB,GAEjBD,UAAA,MAFF,IAMAC,EAAA,GAAmBD,UAAA,MAAnB,GAGJ,MAEF,YACA,YACA,eACA,kBACA,kBACA,WACA,iBACOF,EAAL,KACEA,EAAA,OAEFA,EAAA,QAAyBE,UAAA,GAAL,GAApB,GAAgDF,EAAYI,IAC5D,MAEF,WACA,UACA,UACA,UACA,WACA,gBACA,QACOJ,EAAL,KACEA,EAAA,GAAoBE,UAAA,GAApB,IAMV,W,gJCrGY,cAEZ,OAAO,cAAW,CAChBtB,KAAM,KAAF,OADY,GAGhBC,YAHgB,EAKhBC,MAAO,CACLC,GADK,OAELC,IAAK,CACHC,KADG,OAEHC,QAAS,QAIbE,OAbgB,SAaV,EAbU,GAaoB,IAAzB,EAAyB,EAAzB,QAAyB,EAAzB,KAAeC,EAAU,EAAVA,SACxBE,EAAA,YAAoB,UAAGX,EAAH,YAAWW,EAAA,aAAZ,IAAnB,OADkC,IAG1BD,EAAR,EAAQA,MACR,KAAW,CAETC,EAAA,SACA,IAAMC,EAAUC,OAAA,gBAA0B,SAAAC,GAGxC,YAAIA,EAAgB,OAAO,EAE3B,IAAMC,EAAQL,EALgC,GAS9C,OAAII,EAAA,WAAJ,UACEH,EAAA,YACA,GAGKI,GAAP,kBAAuBA,KAGrBH,EAAJ,SAAoBD,EAAA,wBAAwBC,EAAA,KAAxB,OAQtB,OALIV,EAAJ,KACES,EAAA,SAAgBA,EAAA,UAAhB,GACAA,EAAA,YAAmBT,EAAnB,IAGKc,EAAEd,EAAD,MAAR","file":"js/chunk-7f5746b0.fff124b3.js","sourcesContent":["import './_grid.sass'\n\nimport Grid from './grid'\n\nexport default Grid('flex')\n","import './_grid.sass'\nimport './VGrid.sass'\n\nimport Grid from './grid'\n\nimport mergeData from '../../util/mergeData'\n\n/* @vue/component */\nexport default Grid('container').extend({\n  name: 'v-container',\n  functional: true,\n  props: {\n    id: String,\n    tag: {\n      type: String,\n      default: 'div',\n    },\n    fluid: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  render (h, { props, data, children }) {\n    let classes\n    const { attrs } = data\n    if (attrs) {\n      // reset attrs to extract utility clases like pa-3\n      data.attrs = {}\n      classes = Object.keys(attrs).filter(key => {\n        // TODO: Remove once resolved\n        // https://github.com/vuejs/vue/issues/7841\n        if (key === 'slot') return false\n\n        const value = attrs[key]\n\n        // add back data attributes like data-test=\"foo\" but do not\n        // add them as classes\n        if (key.startsWith('data-')) {\n          data.attrs![key] = value\n          return false\n        }\n\n        return value || typeof value === 'string'\n      })\n    }\n\n    if (props.id) {\n      data.domProps = data.domProps || {}\n      data.domProps.id = props.id\n    }\n\n    return h(\n      props.tag,\n      mergeData(data, {\n        staticClass: 'container',\n        class: Array<any>({\n          'container--fluid': props.fluid,\n        }).concat(classes || []),\n      }),\n      children\n    )\n  },\n})\n","import './_grid.sass'\n\nimport Grid from './grid'\n\nexport default Grid('layout')\n","/**\n * @copyright 2017 Alex Regan\n * @license MIT\n * @see https://github.com/alexsasharegan/vue-functional-data-merge\n */\n\nimport { VNodeData } from 'vue'\n\n/**\n * Intelligently merges data for createElement.\n * Merges arguments left to right, preferring the right argument.\n * Returns new VNodeData object.\n */\nexport default function mergeData (...vNodeData: VNodeData[]): VNodeData\nexport default function mergeData (): VNodeData {\n  const mergeTarget: VNodeData & { [key: string]: any } = {}\n  let i: number = arguments.length\n  let prop: string\n  let event: string\n\n  // Allow for variadic argument length.\n  while (i--) {\n    // Iterate through the data properties and execute merge strategies\n    // Object.keys eliminates need for hasOwnProperty call\n    for (prop of Object.keys(arguments[i])) {\n      switch (prop) {\n        // Array merge strategy (array concatenation)\n        case 'class':\n        case 'style':\n        case 'directives':\n          if (!Array.isArray(mergeTarget[prop])) {\n            mergeTarget[prop] = []\n          }\n          // Repackaging in an array allows Vue runtime\n          // to merge class/style bindings regardless of type.\n          mergeTarget[prop] = mergeTarget[prop].concat(arguments[i][prop])\n          break\n        // Space delimited string concatenation strategy\n        case 'staticClass':\n          if (!arguments[i][prop]) {\n            break\n          }\n          if (mergeTarget[prop] === undefined) {\n            mergeTarget[prop] = ''\n          }\n          if (mergeTarget[prop]) {\n            // Not an empty string, so concatenate\n            mergeTarget[prop] += ' '\n          }\n          mergeTarget[prop] += arguments[i][prop].trim()\n          break\n        // Object, the properties of which to merge via array merge strategy (array concatenation).\n        // Callback merge strategy merges callbacks to the beginning of the array,\n        // so that the last defined callback will be invoked first.\n        // This is done since to mimic how Object.assign merging\n        // uses the last given value to assign.\n        case 'on':\n        case 'nativeOn':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {}\n          }\n          const listeners = mergeTarget[prop]!\n          for (event of Object.keys(arguments[i][prop] || {})) {\n            // Concat function to array of functions if callback present.\n            if (listeners[event]) {\n              // Insert current iteration data in beginning of merged array.\n              listeners[event] = Array<Function>().concat( // eslint-disable-line\n                listeners[event],\n                arguments[i][prop][event]\n              )\n            } else {\n              // Straight assign.\n              listeners[event] = arguments[i][prop][event]\n            }\n          }\n          break\n        // Object merge strategy\n        case 'attrs':\n        case 'props':\n        case 'domProps':\n        case 'scopedSlots':\n        case 'staticStyle':\n        case 'hook':\n        case 'transition':\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = {}\n          }\n          mergeTarget[prop] = { ...arguments[i][prop], ...mergeTarget[prop] }\n          break\n        // Reassignment strategy (no merge)\n        case 'slot':\n        case 'key':\n        case 'ref':\n        case 'tag':\n        case 'show':\n        case 'keepAlive':\n        default:\n          if (!mergeTarget[prop]) {\n            mergeTarget[prop] = arguments[i][prop]\n          }\n      }\n    }\n  }\n\n  return mergeTarget\n}\n","// Types\nimport Vue, { VNode } from 'vue'\n\nexport default function VGrid (name: string) {\n  /* @vue/component */\n  return Vue.extend({\n    name: `v-${name}`,\n\n    functional: true,\n\n    props: {\n      id: String,\n      tag: {\n        type: String,\n        default: 'div',\n      },\n    },\n\n    render (h, { props, data, children }): VNode {\n      data.staticClass = (`${name} ${data.staticClass || ''}`).trim()\n\n      const { attrs } = data\n      if (attrs) {\n        // reset attrs to extract utility clases like pa-3\n        data.attrs = {}\n        const classes = Object.keys(attrs).filter(key => {\n          // TODO: Remove once resolved\n          // https://github.com/vuejs/vue/issues/7841\n          if (key === 'slot') return false\n\n          const value = attrs[key]\n\n          // add back data attributes like data-test=\"foo\" but do not\n          // add them as classes\n          if (key.startsWith('data-')) {\n            data.attrs![key] = value\n            return false\n          }\n\n          return value || typeof value === 'string'\n        })\n\n        if (classes.length) data.staticClass += ` ${classes.join(' ')}`\n      }\n\n      if (props.id) {\n        data.domProps = data.domProps || {}\n        data.domProps.id = props.id\n      }\n\n      return h(props.tag, data, children)\n    },\n  })\n}\n"],"sourceRoot":""}